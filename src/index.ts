import { app, BrowserWindow, ipcMain, dialog, nativeImage } from 'electron';
import isDev from 'electron-is-dev';
import * as Path from 'path';

import { QueryRequest, InsertRequest, UpdateRequest, AttributeRequest } from './interfaces/DataParameterInterfaces';
import MySQLConnection from './Server';
import ConfigFiles from './Config';
import { MessageBoxOptions, OpenDialogOptions } from 'electron/main';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

declare const SERVER_WINDOW_WEBPACK_ENTRY: string;
declare const SERVER_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

let mainWindow: BrowserWindow, serverWindow: BrowserWindow;
let connection: MySQLConnection, config: ConfigFiles;

const createWindows = (): void => {

  mainWindow = new BrowserWindow({

    width: 1280,    
    height: 720,
    show: false,

    minWidth: 800,
    minHeight: 600,

    fullscreen: false,
    fullscreenable: false,
    resizable: false,

    webPreferences: {
      allowRunningInsecureContent: false,   
      contextIsolation: true,
      sandbox: true,      
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },

    title: "RUM Viewer Application | Main Window",
    icon: Path.resolve(app.getAppPath(), 'icons/database_icon-64px.ico'),
  });

  serverWindow = new BrowserWindow({

    width: 500,
    height: 720,
    show: false,

    fullscreen: false,
    fullscreenable: false,
    resizable: false,

    webPreferences: {
      allowRunningInsecureContent: false,    
      contextIsolation: true,
      sandbox: true,      
      preload: SERVER_WINDOW_PRELOAD_WEBPACK_ENTRY,      
    },

    title: "RUM Viewer Application | Server Window",
    icon: Path.resolve(app.getAppPath(), 'icons/database_icon-64px.ico'),
  });

  // Load Webpacked Version of App.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  serverWindow.loadURL(SERVER_WINDOW_WEBPACK_ENTRY);

  mainWindow.once("ready-to-show", () => {
    mainWindow.show();
    if(isDev) mainWindow.webContents.openDevTools();
  });
  
  serverWindow.once("ready-to-show", () => {
      if(isDev) {
        serverWindow.show();
        serverWindow.webContents.openDevTools();
        serverWindow.resizable = true;
      }
  });

  mainWindow.on("close", (event) => {
    const choice = dialog.showMessageBoxSync(mainWindow, 
    {
      type: 'question',
      buttons: ['Yes', 'No'],
      title: 'Confirm',
      message: 'Are you sure you want to quit?',
    });

    if(choice === 1) {
      event.preventDefault();
    }
    else {
      if(!serverWindow.isDestroyed()){
        serverWindow.close();
      }

      connection.endServerConnection();
    }

  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  config = new ConfigFiles(app.getAppPath() + '/Config.json');
  await config.initializeConfig()
  .then(() => {
    connection = new MySQLConnection(config.getServerConfig());
           
  });

  createWindows();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindows();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.on("RequestConfigData", (event) => {
  event.sender.send("RequestConfigData", config.getConfigData());
});

ipcMain.on("SetConfigData", (event, messageData: any) => {

});

ipcMain.on("RequestDialogMessage", (event, messageData: MessageBoxOptions) => {
  dialog.showMessageBox(mainWindow, messageData);
});

ipcMain.on("RequestDialogOpen", (event, messageData: OpenDialogOptions) => {
  dialog.showOpenDialog( mainWindow, messageData)
  .then(results => {
    if(results.canceled) {
      event.sender.send("RequestDialogOpen", false);
      return;
    }
    const ImageData: Buffer[] = [];

    for (let i = 0; i < 2; i++) {     
      if(results.filePaths[i] == undefined) continue;
      else {
        const image = nativeImage.createFromPath(results.filePaths[i]);
        let bufferData = image.toBitmap();

        ImageData.push(bufferData);        
      }
    }

    event.sender.send("RequestDialogOpen", ImageData);
  })
  .catch(error => {
    console.log(error);
    event.sender.send("RequestDialogOpen", false);
  });
})

ipcMain.on("RequestDataList", async (event, dataParams: QueryRequest) => {
  connection.RequestQueryList(dataParams)
  .then(results => {
    event.sender.send("RequestDataList", results);
  })
  .catch(error => {
    console.log(error);
    event.sender.send("RequestDataList", []);
  })
});

ipcMain.on("RequestAttributeEdit", async (event, dataParams: AttributeRequest) => {
  connection.RequestAttributeData(dataParams)
  .then(results => {  
    event.sender.send("RequestAttributeEdit", results);
  })
  .catch(error => {
    console.log(error);
    event.sender.send("RequestAttributeEdit", null);
  })
})

ipcMain.on("RequestAttributeCars", async (event, dataParms: AttributeRequest) => {
  connection.RequestAttributeCars(dataParms)
  .then(results => {
    event.sender.send("RequestAttributeCars", results);
  })
  .catch(error => {
    console.log(error);
    event.sender.send("ReqeustAttributeCars", null);
  });
});

ipcMain.on("AppendAttributeEdit", async (event, dataParams: UpdateRequest) => {
  connection.AppendAttributeEdit(dataParams)
  .then(editted => {
    event.sender.send("AppendAttributeEdit", editted);
  })
  .catch(error => {
    console.log(error);
    event.sender.send("AppendAttributeEdit", false);
  })
});

ipcMain.on("InsertNewData", async (event, dataParams: InsertRequest) => {
  connection.InsertNewEntry(dataParams)
  .then(inserted => {
    event.sender.send("InsertNewData", inserted);
  })
  .catch(error => {
    console.log(error);
    event.sender.send("InsertNewData", false);
  })
});